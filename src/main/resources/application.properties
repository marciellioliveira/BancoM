spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#spring.jpa.hibernate.ddl-auto = update
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=America/Sao_Paulo
server.port=8086
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto = update
spring.jpa.defer-datasource-initialization=true
jwt.public.key=classpath:app.pub
jwt.private.key=classpath:app.key
logging.level.org.springframework.security=DEBUG
exchangerate.api.key=${EXCHANGERATE_API_KEY}
exchangerate.api.key=d2898dd2e8e245ff7ad7b82a

spring.redis.host=localhost
spring.redis.port=6379
spring.redis.database=0


#Define o número máximo de threads no pool usado para executar tarefas agendadas.
#Então aqui o sistema pode executar até 5 tarefas agendadas simultaneamente
#Se todas as threads estiverem ocupadas, novas tarefas aguardam na fila
spring.task.scheduling.pool.size=5 
#Esse pool size é poderoso porque se tiver muitas tarefas juntas, não precisa aguardar na fila
#dependendo do numero colocado é o tanto que as tarefas podem rodar em paralelo

#Define um prefixo para os nomes das threads do pool de agendamento.
#Serve para customizar o prefixo das threads
spring.task.scheduling.thread-name-prefix=agendador-
spring.jackson.time-zone=America/Sao_Paulo

#Os dois abaixo são para esperar terminar a tarefa para depois desligar a aplicação
spring.task.scheduling.shutdown.await-termination=true
spring.task.scheduling.shutdown.await-termination-period=30s

#Agora vou ativar a escrita de log em arquivo
logging.file.name=bancom.log
logging.level.org.springframework=warn
logging.level.com.seupacote=debug




#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE